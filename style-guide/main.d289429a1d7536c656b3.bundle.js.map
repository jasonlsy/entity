{"version":3,"file":"main.d289429a1d7536c656b3.bundle.js","sources":["webpack:///./src/apps/observation/entities/Observation.js","webpack:///../ui/src/Button/Button.styles.js","webpack:///../theme/src/global-style.js","webpack:///../ui/src/Type/Type.hooks.js"],"sourcesContent":["import DuckDjangoRestFramework from '@entity/duck-namespace-drf';\nimport { Fields } from '@entity/core';\nimport { mock } from '@entity/duck-mock-drf';\n\nimport settings from 'settings';\nimport EntityAction from 'apps/activity/entities/Action';\nimport EntityActivity from 'apps/activity/entities/Activity';\n\nclass Observation extends EntityActivity {\n  static fields = Object.assign({}, EntityActivity.fields, {\n    follow_up_actions: new Fields.EntityField({\n      entity: EntityAction,\n      many: true,\n    }),\n  })\n\n  static actionActionsAdd(record) {\n    return record.update('follow_up_actions', actions => actions.push(\n      EntityAction.dataToRecord({\n        order: actions.size,\n      }),\n    ));\n  }\n\n  static getPaths() {\n    return {\n      apiBase: `/${settings.NAMESPACE}-observation/v1/observation/`,\n      urlBase: '/observation/',\n    };\n  }\n}\n\nObservation.duck = new DuckDjangoRestFramework({ app: 'Observation', entity: Observation });\nmock(Observation, { size: 20 });\n\nexport default Observation;\n","import styled, { css } from 'styled-components';\nimport { color, colorFromPalette, media, mixins } from '@gnowth/theme';\n\nexport default styled.button`\n  align-items: center;\n  background-color: ${props => (props.$paletteAsBackground ? colorFromPalette()(props) : 'transparent')};\n  border: 0;\n  border-radius: 0.25em;\n  cursor: pointer;\n  display: inline-flex;\n  justify-content: center;\n  outline: none;\n  padding: 0.5em 1.5em;\n  position: relative;\n  text-decoration: none;\n\n  ${mixins.space}\n\n  &:hover {\n    background-color: ${color({ palette: 'gray', paletteWeight: '50' })};\n  }\n\n  &:focus {\n    background-color: ${color({ palette: 'gray', paletteWeight: '100' })};\n  }\n\n  &:disabled {\n    background-color: ${color({ palette: 'gray', paletteWeight: '200' })};\n    cursor: auto;\n\n    * {\n      color: ${color({ palette: 'gray', paletteWeight: '800' })};\n    }\n  }\n\n  ${props => props.$media && css`\n    @media only screen and (${props.$media}) {\n      padding: 0.5em 1em;\n\n      .uiButton-Content {\n        display: none;\n      }\n\n      .uiButton-Icon {\n        display: inline-block;\n      }\n    }\n  `}\n\n  ${media.print`\n    display: none;\n  `}\n\n  ${props => props.css}\n`;\n","import idx from 'idx';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  ${props => idx(props, x => x.theme.global)}\n`;\n\nexport default GlobalStyles;\n","import styled, { css } from 'styled-components';\nimport { color, colorFromPalette, media, mixins, useCleanProps } from '@gnowth/theme';\n\nconst local = [\n  'onChangeInput',\n  'value',\n];\n\nconst StringComponent = props => props.children;\n\nconst Component = styled.span`\n  ${props => props.$palette && css`\n    color: ${colorFromPalette()};\n  `}\n\n  ${mixins.space}\n\n  ${media.print`\n    color: ${color({ palette: 'black' })};\n  `}\n\n  ${props => props.css}\n`;\n\nexport default {\n  useComponent(props) {\n    return props.as === null\n      ? StringComponent\n      : Component;\n  },\n\n  useProps(props) {\n    return useCleanProps(props, { local });\n  },\n};\n"],"mappings":"AAQA;;AC6CA;ACjDA;AAGA;ACWA;AAGA","sourceRoot":""}